from config import dp, bot
from config.config import DEBUG
from database import User, Group
from keyboards import Keyboard
from utils.docParse import parseDocument

from aiogram import types
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging



from aiogram.utils.helper import Helper, HelperMode, ListItem


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Options(StatesGroup):
    enter_group = State()

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = message.from_user
        
        # –õ–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
        logging.info(f'New message: User={user.id}, Message={message.text}')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await User.exists(user.id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await bot.send_message(
            chat_id=user.id,
            text=f'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, { user.first_name }!\n' + \
                'üë®‚Äçüè´ –Ø –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º novsu.ru\n\n' + \
                'üß∞ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É:\n' + \
                'üìù –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ–Ω—ã',
            reply_markup=Keyboard.main()
        )
    except Exception as error:
        print(f'[ Commands/Handlers/process_start_command ] Error: {error}')
        logging.error(error)

#
#
# –¢—Ä–æ–Ω—É—Ç —Ñ–∏–ª—å—Ç—Ä
#
#

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ–Ω"
#
# –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:
#
# –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ–Ω
# –∑–∞–º–µ–Ω–∞
# –∑–∞–º–µ–Ω—ã
#
@dp.message_handler(filters.Regexp('(–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ–Ω|–∑–∞–º–µ–Ω(–∞|—ã))'))
async def checkReplacement(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–∞
    user = await User.get( message.from_user.id )

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if not user.group_id is None and type(user.group_id) == int:
        return await message.answer(parseDocument(group))
    else:
        return await message.reply('‚ùå –î–ª—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥—Ä—É–ø–ø—É')

    

#
# –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:
#
# –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
# –≥—Ä—É–ø–ø–∞
#   
@dp.message_handler(filters.Regexp('(–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã|–≥—Ä—É–ø–ø–∞)'))
async def selectGroup(message: types.Message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await Options.enter_group.set()
    
    return await message.reply(
        '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã', 
        reply=False, 
        reply_markup=types.ReplyKeyboardRemove()
    )


#
#
# –¢—Ä–æ–Ω—É—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#
#

# –ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã 
@dp.message_handler(state=Options.enter_group)
async def input_group(message: types.Message, state: FSMContext):
    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã
    group = await Group.exists( message.text.strip() )

    if bool(group):
        await User.update(user.id, group.id)
    else:
        return await message.reply('‚ùå –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    return await message.answer(
        '‚úÖ –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        reply=False,
        reply_markup=addButtons()
    )
