from config import dp, bot
from config.config import DEBUG
from database import User, Group
from keyboards import Keyboard

from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import logging

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
#logging.setLevel()

class Options(StatesGroup):
    enter_group = State()

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.chat.id
        
        # –î–µ–±–∞–≥ –ø—Ä–∏ –ª–æ–≥–≥–µ—Ä–µ
        #logging.

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ –±–∞–∑–µ
        if not await User.get(user_id):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await User.add(user_id)

        await bot.send_message(chat_id=user_id, text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=Keyboard.main())
    except Exception as error:
        print(f'[ Commands/Handlers/process_start_command ] Error: {error}')

